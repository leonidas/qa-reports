# QA Reports application configuration

# By default QA Reports bounces files that do not contain any valid test
# cases. Set this to true to enable creating reports without any cases.
allow_empty_files: false

# Set this to true to hide the targets that do not contain any reports
# from the front page (target is the 2nd level of hierarchy)
hide_empty_targets: false

# Inline image attachments. By default report attachment list contains
# only links to the attachments. If set to true, image attachments
# (jpg|jpeg|gif|png|bmp) are inlined using <img> tags
inline_images: false

# Show link to registration page on login page. By default registration
# URL is not made publicly available but setting this to true will add
# a link to login page.
show_registration_link: false

# QA Reports accepts Pass, Fail, N/A, and Measured as valid results for
# a test case by default. It can be configured to accept additional ones
# as well by defining them here. Notice that currently all tests with
# custom results are calculated as N/A in the metrics.
# Example: custom_results = ['Blocked', 'Pending']
custom_results: []

# Name of the application, used in HTML titles etc.
app_name: "MeeGo QA Reports"

# Custom CSS file to include. To reduce the need to touch the default
# stylsheet users may defined an URL to a custom stylesheet that
# (partially) overrides the default one. If given, the path defined
# here is included in the HTML output.
# Example: custom_css = '/stylesheets/themes/nokia.css'
#
# Notice: this is somewhat deprecated - for improved performance you
# should use asset pipeline. See the instructions from wiki:
# https://github.com/leonidas/qa-reports/wiki/Customization
custom_css: ''

# Help link URIs on the top of the page. Define either a http(s) URI
# or a mailto:email@domain.com to enable the item in question.
# Leave empty to disable a particular link.

# Give Feedback
feedback_link: 'mailto:meego-qa@lists.meego.com'

# Documentation
documentation_link: 'https://github.com/leonidas/qa-reports/wiki'

# Submit an Idea
idea_link: 'https://github.com/leonidas/qa-reports/issues'

# make the date format configurable in the report info box
# for format directives see:
# http://www.ruby-doc.org/core-1.9.3/Time.html#method-i-strftime
date_format: '%d %B %Y'

# make the date format configurable in the reports overview page
# for format directives see:
# http://www.ruby-doc.org/core-1.9.3/Time.html#method-i-strftime
table_date_format: '%d.%m'

# xslt processing of any xml results file can be enabled with setting
# a path to a xsl file. Adding this field adds [html] link after xml
# result files in reports' original results files list. This allows
# pretty representation of e.g. step information that is not
# stored in QA Reports database.
#
# You can download MeeGo's result file xsl file from
# http://meego.gitorious.org/meego-quality-assurance/test-definition
# Example: xml_stylesheet = './lib/xslt/testdefinition-results.xsl'
xml_stylesheet: ''

# You can change the labels used for grouping the test results. Default
# grouping goes like release_version / target / testset / product, but
# your organization likely uses some other names for the fields. You can
# define custom name (for the UI) for each field. Notice, that you can also
# change the names for the API using 'api_mapping' section below
group_labels:
  release_version: ''
  target: ''
  testset: ''
  product: ''

# You can map the grouping related API parameters in case your organization
# does not actually group your results under the current names. So if you
# use e.g. SW Platform instead of a Release Version you can define mapping
# from release_version to sw_platform so API users can use terms they're
# familiar with. The mappings are checked in order default order, so you
# can define e.g. 'target': 'testset' but not 'product': 'testset' because
# the value assigned to the "real" testset would be delete when checking
# mapping for product. Also if you define parameters with same names as the
# default ones, upload with default parameters likely fails.
#
# Be careful as you could map over any of the other fields such as
# created_at and then the upload will fail.
api_mapping:
  release_version: ''
  target: ''
  testset: ''
  product: ''

# Default prefixes for Issue Summary and Patches Included CSV API shortcuts.
# The API provides shortcut methods for these two fields that will convert
# bug IDs to the markup format. If defined here the given prefix is added
# to IDs not having a prefix defined, e.g. if patches_included_csv contains
# 1234,5678 they're converted to [[1234]] and [[5678]] if default prefix
# is not defined here, and then they will be linked to the service defined
# as default in external.services.yml. However, if you define a prefix for
# patches included field, e.g. PREFIX, then that prefix is added for those
# without one, e.g. [[PREFIX#1234]] and [[PREFIX#5678]]. If you use these
# make sure to communicate this clearly to users because it can be a bit
# confusing since the general default service for [[xxxx]] is not used.
patches_included_default_prefix: ''
issue_summary_default_prefix: ''
