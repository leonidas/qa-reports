# QA Reports application configuration

# By default QA Reports bounces files that do not contain any valid test
# cases. Set this to true to enable creating reports without any cases.
allow_empty_files: false

# Set this to true to hide the targets that do not contain any reports
# from the front page (target is the 2nd level of hierarchy)
hide_empty_targets: false

# QA Reports accepts Pass, Fail, N/A, and Measured as valid results for
# a test case by default. It can be configured to accept additional ones
# as well by defining them here. Notice that currently all tests with
# custom results are calculated as N/A in the metrics.
# Example: custom_results = ['Blocked', 'Pending']
custom_results: []

# Name of the application, used in HTML titles etc.
app_name: "MeeGo QA Reports"

# Custom CSS file to include. To reduce the need to touch the default
# stylsheet users may defined an URL to a custom stylesheet that
# (partially) overrides the default one. If given, the path defined
# here is included in the HTML output.
# Example: custom_css = '/stylesheets/themes/nokia.css'
custom_css: ''

# Help link URIs on the top of the page. Define either a http(s) URI
# or a mailto:email@domain.com to enable the item in question.
# Leave empty to disable a particular link.

# Give Feedback
feedback_link: 'mailto:meego-qa@lists.meego.com'

# Documentation
documentation_link: 'https://github.com/leonidas/qa-reports/wiki'

# Submit an Idea
idea_link: 'https://github.com/leonidas/qa-reports/issues'

# make the date format configurable in the report info box
# for format directives see:
# http://www.ruby-doc.org/core-1.9.3/Time.html#method-i-strftime
date_format: '%d %B %Y'

# xslt processing of any xml results file can be enabled with setting
# a path to a xsl file. QA-Reports contains 2 examples:
# a very simple one:
# ./lib/xslt/testresults-view.xsl 
# and a more advanced one:
# ./lib/xslt/testdefinition-results.xsl
# testdefinition-results.xsl is from:
# http://meego.gitorious.org/meego-quality-assurance/test-definition/blobs/master/src/data/testdefinition-results.xsl
# NOTE: both examples just process xml result files produced by
# testrunner-lite. 
xml_stylesheet: ''

